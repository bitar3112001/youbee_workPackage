import { ElementRef, OnDestroy } from '@angular/core';
import { ApexAnnotations, ApexAxisChartSeries, ApexChart, ApexDataLabels, ApexFill, ApexGrid, ApexLegend, ApexNonAxisChartSeries, ApexMarkers, ApexNoData, ApexPlotOptions, ApexResponsive, ApexStates, ApexStroke, ApexTheme, ApexTitleSubtitle, ApexTooltip, ApexXAxis, ApexYAxis, ApexForecastDataPoints } from './apex-types';
import * as i0 from "@angular/core";
declare global {
    interface Window {
        ApexCharts: any;
    }
}
export declare class ChartComponent implements OnDestroy {
    chart: import("@angular/core").InputSignal<ApexChart | undefined>;
    annotations: import("@angular/core").InputSignal<ApexAnnotations | undefined>;
    colors: import("@angular/core").InputSignal<any[] | undefined>;
    dataLabels: import("@angular/core").InputSignal<ApexDataLabels | undefined>;
    series: import("@angular/core").InputSignal<ApexAxisChartSeries | ApexNonAxisChartSeries | undefined>;
    stroke: import("@angular/core").InputSignal<ApexStroke | undefined>;
    labels: import("@angular/core").InputSignal<string[] | undefined>;
    legend: import("@angular/core").InputSignal<ApexLegend | undefined>;
    markers: import("@angular/core").InputSignal<ApexMarkers | undefined>;
    noData: import("@angular/core").InputSignal<ApexNoData | undefined>;
    fill: import("@angular/core").InputSignal<ApexFill | undefined>;
    tooltip: import("@angular/core").InputSignal<ApexTooltip | undefined>;
    plotOptions: import("@angular/core").InputSignal<ApexPlotOptions | undefined>;
    responsive: import("@angular/core").InputSignal<ApexResponsive[] | undefined>;
    xaxis: import("@angular/core").InputSignal<ApexXAxis | undefined>;
    yaxis: import("@angular/core").InputSignal<ApexYAxis | ApexYAxis[] | undefined>;
    forecastDataPoints: import("@angular/core").InputSignal<ApexForecastDataPoints | undefined>;
    grid: import("@angular/core").InputSignal<ApexGrid | undefined>;
    states: import("@angular/core").InputSignal<ApexStates | undefined>;
    title: import("@angular/core").InputSignal<ApexTitleSubtitle | undefined>;
    subtitle: import("@angular/core").InputSignal<ApexTitleSubtitle | undefined>;
    theme: import("@angular/core").InputSignal<ApexTheme | undefined>;
    autoUpdateSeries: import("@angular/core").InputSignal<boolean>;
    readonly chartElement: import("@angular/core").Signal<ElementRef<any>>;
    private chartObj?;
    private hasPendingLoad;
    constructor();
    ngOnDestroy(): void;
    render(): Promise<void> | undefined;
    updateOptions(options: any, redrawPaths?: boolean, animate?: boolean, updateSyncedCharts?: boolean): Promise<void> | undefined;
    updateSeries(newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries, animate?: boolean): Promise<void> | undefined;
    appendSeries(newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries, animate?: boolean): void;
    appendData(newData: any[]): void;
    toggleSeries(seriesName: string): Promise<void>;
    showSeries(seriesName: string): void;
    hideSeries(seriesName: string): void;
    resetSeries(): void;
    zoomX(min: number, max: number): void;
    toggleDataPointSelection(seriesIndex: number, dataPointIndex?: number): void;
    destroy(): void;
    setLocale(localeName: string): void;
    paper(): void;
    addXaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    addYaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    addPointAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    removeAnnotation(id: string, options?: any): void;
    clearAnnotations(options?: any): void;
    dataURI(options?: any): Promise<{
        imgURI: string;
    } | {
        blob: Blob;
    }> | undefined;
    private buildOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChartComponent, "apx-chart", never, { "chart": { "alias": "chart"; "required": false; "isSignal": true; }; "annotations": { "alias": "annotations"; "required": false; "isSignal": true; }; "colors": { "alias": "colors"; "required": false; "isSignal": true; }; "dataLabels": { "alias": "dataLabels"; "required": false; "isSignal": true; }; "series": { "alias": "series"; "required": false; "isSignal": true; }; "stroke": { "alias": "stroke"; "required": false; "isSignal": true; }; "labels": { "alias": "labels"; "required": false; "isSignal": true; }; "legend": { "alias": "legend"; "required": false; "isSignal": true; }; "markers": { "alias": "markers"; "required": false; "isSignal": true; }; "noData": { "alias": "noData"; "required": false; "isSignal": true; }; "fill": { "alias": "fill"; "required": false; "isSignal": true; }; "tooltip": { "alias": "tooltip"; "required": false; "isSignal": true; }; "plotOptions": { "alias": "plotOptions"; "required": false; "isSignal": true; }; "responsive": { "alias": "responsive"; "required": false; "isSignal": true; }; "xaxis": { "alias": "xaxis"; "required": false; "isSignal": true; }; "yaxis": { "alias": "yaxis"; "required": false; "isSignal": true; }; "forecastDataPoints": { "alias": "forecastDataPoints"; "required": false; "isSignal": true; }; "grid": { "alias": "grid"; "required": false; "isSignal": true; }; "states": { "alias": "states"; "required": false; "isSignal": true; }; "title": { "alias": "title"; "required": false; "isSignal": true; }; "subtitle": { "alias": "subtitle"; "required": false; "isSignal": true; }; "theme": { "alias": "theme"; "required": false; "isSignal": true; }; "autoUpdateSeries": { "alias": "autoUpdateSeries"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
